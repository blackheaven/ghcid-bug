# Set all targetâ€™s visibility in this package to "public".
package(default_visibility = ["//visibility:public"])

# Load rules_haskell rules.
load(
    "@rules_haskell//haskell:defs.bzl",
    "haskell_toolchain_library",
    "haskell_library",
    "haskell_binary",
    "haskell_repl",
)

# haskell_toolchain_library can access builtin GHC packages
# and assign them a bazel target name, so that they
# can be referenced as dependencies.
haskell_toolchain_library(name = "base")

exts = [
    "-XDataKinds",
    "-XDefaultSignatures",
    "-XDeriveAnyClass",
    "-XDeriveGeneric",
    "-XDerivingStrategies",
    "-XDerivingVia",
    "-XDuplicateRecordFields",
    "-XFlexibleContexts",
    "-XGADTs",
    "-XGeneralizedNewtypeDeriving",
    "-XKindSignatures",
    "-XLambdaCase",
    "-XOverloadedLabels",
    "-XOverloadedRecordDot",
    "-XOverloadedStrings",
    "-XRankNTypes",
    "-XRecordWildCards",
    "-XScopedTypeVariables",
    "-XStrictData",
    "-XTypeApplications",
    "-XTypeFamilies",
    "-XTypeOperators",
    "-XNoPolyKinds",
    "-XNoImportQualifiedPost",
    "-Wall",
    "-Wcompat",
    "-Widentities",
    "-Wincomplete-record-updates",
    "-Wincomplete-uni-patterns",
    "-Wmissing-deriving-strategies",
    "-Wno-ambiguous-fields",  # waiting for improved OverloadedRecordUpdate extension
    "-Wpartial-fields",
    "-Wredundant-constraints",
    "-Werror",
]

# You can add your own libraries with haskell_library.
haskell_library(
    name = "bug",
    compiler_flags = exts,
    src_strip_prefix = "src",
    srcs = glob(['src/*.hs']),
    deps = [
        "base"
    ],
)

# An example binary using the Prelude module from the
# GHC base package, and zlib from stackage, to print the hello world.
haskell_binary(
    name = "example",
    srcs = [":Example.hs"],
    deps = [":base", "@stackage//:zlib"],
)

haskell_repl(
    name = "repl",
    deps = [
        ":bug",
    ],
)
